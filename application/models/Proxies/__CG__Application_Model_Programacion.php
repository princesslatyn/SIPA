<?php

namespace App\Proxies\__CG__;

/**
 * THIS CLASS WAS GENERATED BY THE DOCTRINE ORM. DO NOT EDIT THIS FILE.
 */
class Application_Model_Programacion extends \Application_Model_Programacion implements \Doctrine\ORM\Proxy\Proxy
{
    private $_entityPersister;
    private $_identifier;
    public $__isInitialized__ = false;
    public function __construct($entityPersister, $identifier)
    {
        $this->_entityPersister = $entityPersister;
        $this->_identifier = $identifier;
    }
    /** @private */
    public function __load()
    {
        if (!$this->__isInitialized__ && $this->_entityPersister) {
            $this->__isInitialized__ = true;

            if (method_exists($this, "__wakeup")) {
                // call this after __isInitialized__to avoid infinite recursion
                // but before loading to emulate what ClassMetadata::newInstance()
                // provides.
                $this->__wakeup();
            }

            if ($this->_entityPersister->load($this->_identifier, $this) === null) {
                throw new \Doctrine\ORM\EntityNotFoundException();
            }
            unset($this->_entityPersister, $this->_identifier);
        }
    }

    /** @private */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    
    public function setnum_dias($num)
    {
        $this->__load();
        return parent::setnum_dias($num);
    }

    public function setrecorrido($reco)
    {
        $this->__load();
        return parent::setrecorrido($reco);
    }

    public function setfecha_salida($sal)
    {
        $this->__load();
        return parent::setfecha_salida($sal);
    }

    public function setfecha_llegada($lle)
    {
        $this->__load();
        return parent::setfecha_llegada($lle);
    }

    public function setdepartamental($dep)
    {
        $this->__load();
        return parent::setdepartamental($dep);
    }

    public function setlugar_encuentro($lug)
    {
        $this->__load();
        return parent::setlugar_encuentro($lug);
    }

    public function setdias_pernoctados($per)
    {
        $this->__load();
        return parent::setdias_pernoctados($per);
    }

    public function setnum_pasajeros($pas)
    {
        $this->__load();
        return parent::setnum_pasajeros($pas);
    }

    public function setobservaciones($obs)
    {
        $this->__load();
        return parent::setobservaciones($obs);
    }

    public function setid_calendario($cal)
    {
        $this->__load();
        return parent::setid_calendario($cal);
    }

    public function setcod_practica($pra)
    {
        $this->__load();
        return parent::setcod_practica($pra);
    }

    public function setid_participante($par)
    {
        $this->__load();
        return parent::setid_participante($par);
    }

    public function setparticipantes($parti)
    {
        $this->__load();
        return parent::setparticipantes($parti);
    }

    public function setrecursos($recur)
    {
        $this->__load();
        return parent::setrecursos($recur);
    }

    public function getparticipantes()
    {
        $this->__load();
        return parent::getparticipantes();
    }

    public function getrecursos()
    {
        $this->__load();
        return parent::getrecursos();
    }


    public function __sleep()
    {
        return array('__isInitialized__', 'codigo_prog', 'num_dias', 'recorrido', 'fecha_salida', 'fecha_llegada', 'departamental', 'lugar_encuentro', 'dias_pernoctados', 'fecha_registro', 'num_pasajeros', 'observaciones', 'id_calendario', 'cod_practica', 'id_participante', 'participantes', 'recursos');
    }

    public function __clone()
    {
        if (!$this->__isInitialized__ && $this->_entityPersister) {
            $this->__isInitialized__ = true;
            $class = $this->_entityPersister->getClassMetadata();
            $original = $this->_entityPersister->load($this->_identifier);
            if ($original === null) {
                throw new \Doctrine\ORM\EntityNotFoundException();
            }
            foreach ($class->reflFields AS $field => $reflProperty) {
                $reflProperty->setValue($this, $reflProperty->getValue($original));
            }
            unset($this->_entityPersister, $this->_identifier);
        }
        
    }
}